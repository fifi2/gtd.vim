*gtd.txt*   Getting Things Done with Vim

	  ___________________________   ____   ____ ___   _____   ~
	 /  _____/\__    ___/\______ \  \   \ /   /|   | /     \  ~
	/   \  ___  |    |    |    |  \  \   Y   / |   |/  \ /  \ ~
	\    \_\  \ |    |    |____|   \  \     /  |   /    Y    \~
	 \______  / |____|   /_______  //\ \___/   |___\____|__  /~
	        \/                   \/ \/                     \/ ~

GTD with Vim					*gtd.vim* *gtd*

Summary:
1. Introduction					|gtd-introduction|
2. Configuration				|gtd-configuration|
3. Usage					|gtd-usage|
4. Mappings					|gtd-mappings|
5. Syntax					|gtd-syntax|
6. License					|gtd-license|
7. Contributing					|gtd-contributing|
8. Changelog					|gtd-changelog|
9. Credits					|gtd-credits|


==============================================================================
1. Introduction					*gtd-introduction*

Gtd.vim is a plugin to manage notes and keep them as reference files for a
future use. It comes with a major command |:Gtd| you would use to retrieve
already existing ones.

The goal is to save all your notes into a single directory and to rely on the
tags you used to retrieve next actions or former notes you may need again.
This way, you will take advantage of what is GTD and once you open a file that
is obviously needed at a time, you will get your notes right there, just
beyond the tags which allowed you to display the file.

Gtd.vim has been thought to let you decide what GTD workflow you prefer. I
give here examples of what you can do, not what you should. The objective is
to present what this plugin can do.

Right after you set the directory in which to save the Gtd files (see
|g:gtd#dir|), you will create new notes in it with |:GtdNew| command, named
accordingly to the current date and time to save time.
	Eg. 20170629_021800.gtd.

						*gtd-note* *gtd-sample-file*
Here is a sample of what a Gtd file may look like:

	=Title of the Gtd file
	@work
	!inbox
	#project-name
	#involded-person

	Content of the Gtd file, right after the first blank line.

	Etc.

						*gtd-title*
To accelerate the creation of a task file, we create it with a filename
composed by the current date and time. To title it, you can use this syntax
"=Title" on the first line of the file. You will be able to find files with a
keyword in this title.

						*gtd-context*
The @ character precedes the context of the Gtd file. You can use one or more
context per file. It is dedicated to mark the files you want to retrieve in a
particular context.
	Eg. @home
	    @work

						*gtd-action*
Gtd actions are some useful tags to mark files in a distinctive state. It can
be used to create logical baskets for your tasks. Use what you prefer.
	Eg. !inbox
	    !todo
	    !waiting
	    !someday
	    !scheduled-20170629

						*gtd-hashtag*
You can add a bunch of hashtags to your Gtd files to mark they are related to
some peculiar concepts or people.
	Eg.	#john-doe
		#project-name
		#company-name

						*gtd-date*
The creation date of your notes will be known thanks to the automatic filename
of the files. You will be able to look for particular year, month and/or day
notes.

						*gtd-attached-files* *gtd-star*
Gtd.vim let you deal with attached files. It means you can automatically
create a directory next to your Gtd file to save some files into it. A special
marker [*] will be inserted at the end of the title to let you know attached
files are present. If you remove all the attached files of a Gtd file, the
marker will disappear.

						*gtd-content*
What is following your Gtd tags is the content of your Gtd file. The benefit
of this GTD system is that you've got your working notes below the Gtd tags
which let you know these notes are relevant at this particular moment. You can
operate search in the Gtd file content.

						*gtd-philosophy*
As I said, there are different ways to use GTD. The good one is what you
decide to do. Gtd.vim is designed to let you use any kind of action tags,
hashtags or contexts. It will just help you to find your notes according to
the tags you are interested in. Here is just an example of what you can do
with this plugin.

	1. New notes are tagged !inbox. It may be the main action tag. At this
	   point, you need a title, a context, an action tag !inbox and the
	   task detail right after in the file (if the title is not enough).

	2. You will regularly ask Gtd.vim to display !inbox files. While
	   editing one of them, you can decide to change the action tag to
	   something else:
	   - !todo if you can deal with it now
	   - !waiting if you can't do it right now
	   - !someday if you don't want to do it now
	   - !scheduled-YYYYMMDD if you would like to forget it until a
	     particular date.

	   It is the right moment to add some hashtags, you may want to tag
	   people involved, project name, technical concept or organizations
	   related to the task.
	   - #firstname-lastname
	   - #project-name

	3. When you decide, you will be able to search for some notes and work
	   on them, change the action tag, whatever.


==============================================================================
2. Configuration				*gtd-configuration*

Gtd.vim requires no external tools.

To enable loading the Gtd.vim plugin, you will have to activate plugin files
with `:filetype plugin on` in your Vimrc file. See |:filetype-plugin-on|

						*g:gtd#cache*
If you've got lots and lots of notes, you might want to use this option to
activate the cache system and speed up your searches. >
	let g:gtd#cache = 1
<
						*g:gtd#cache_file*
File in which cache will be saved and read. Only used when |g:gtd#cache| is
on. Default value: |g:gtd#dir|/cache. >
	let g:gtd#cache_file = '~/gtd_cache'
<
						*g:gtd#default_context*
When creating a new Gtd file, the plugin automatically try to insert basic Gtd
tags in it. If you want, you can define your default context to let the plugin
insert it as well. This default context will also be added in all your Gtd
searches as an "AND" argument. >
	let g:gtd#default_context = 'work'
<
						*g:gtd#default_action*
When creating a new Gtd file, the plugin automatically try to insert basic Gtd
tags in it. If you want, you can define your default action tag to let the
plugin insert it as well. >
	let g:gtd#default_action = 'inbox'
<
						*g:gtd#dir*
Directory where to save notes or to do the searches. Default is '~/notes'. >
	let g:gtd#dir = '~/notes'
<
						*g:gtd#folder_command*
Command to run to open the folder for |:GtdFiles|. Default is 'explorer.exe'
for Windows and 'xdg-open' for other. >
	let g:gtd#folder_command = 'ranger'
<
						*g:gtd#folding*
Gtd.vim is able to fold your chapters on each title. See |gtd-syntax|. To
activate this, you have to let this setting. >
	let g:gtd#folding = 1
<
						*g:gtd#map_browse_older*
						*g:gtd#map_browse_newer*
You can browse the history of searches, from the |gtd-results| buffer with any
key combinaison you might prefer. Default values are <C-Left> and <C-Right>. >
	let g:gtd#map_browse_older = '<Left>'
	let g:gtd#map_browse_newer = '<Right>'
<
						*g:gtd#map_edit*
From the |gtd-results| buffer, you can edit one |gtd-note| file with <Enter>
(default value). You can chance this map : >
	let g:gtd#map_edit = 'o'
<
						*g:gtd#map_refresh*
From the |gtd-results| buffer, you can refresh the results with <F5> (default
value). See |:GtdRefresh|. You can chance this map : >
	let g:gtd#map_refresh = 'r'
<
						*g:gtd#results_history*
Define how many searches are saved into the history. You can disable this
limitation by setting this parameter to 0. Default: 10. >
	let g:gtd#results_history = 0
<
						*g:gtd#review*
You might want to have a quick review on your most frequent Gtd search. To do
so, you can populate the review list in your configuration. The review is done
when you execute |:GtdReview| command. >
	let g:gtd#review = [
		\ '(!inbox + !scheduled-'.strftime("%Y%m%d").') @work',
		\ '!todo @work',
		\ '!waiting @work',
		\ ]
<
						*g:gtd#tag_lines_count*
You can let this to change the number of lines considered to search tags
(default is 20). You can let it to 0 if you prefer Gtd.vim loads all the file
and wait for the first empty line before leaving the search. >
	let g:gtd#tag_lines_count = 10
<

==============================================================================
3. Usage					*gtd-usage*

						*:GtdNew*
:[range]GtdNew[!]   Create a new task file.

		    Modifiers are allowed (see |<mods>|). Without modifier and
		    with the [!] any changes in the current buffer are
		    abandoned.

		    With a [range] (optional), selected text is inserted in
		    the new |gtd-note|.

						*:Gtd*
:Gtd[!] {formula}   This command allows you to search for some notes regarding
		    theirs tags or content. Results are loaded to the
		    |gtd-results| buffer so you can navigate into it.

		    Modifiers are allowed (see |<mods>|).

						*gtd-formula*
		    {formula} is a string you can consider as a mathematical
		    expression.

		    - {formula} is either a |gtd-atom|
		    - And/or a group of atoms
		      Eg.   atom1 atom2	-> This is a AND operation
			    atom1 + atom2	-> This is a OR operation
			    atom1 (atom2 + atom3)	-> Factorization
			    atom1 (atom2 + (atom3 atom4 + atom5)) atom6
			    ...

		    Natural operator is AND but you can also choose to use +
		    operator if you need OR.
		    At start, the search is performed in all your Gtd files
		    but previous results (for AND operations) define where to
		    continue searching next operands.
		    OR operations allow you to concatenate results.

		    With [!] no default context will be added to the
		    {formula}. See |g:gtd#default_context|.

						*gtd-atom*
		    An atom is a part of your formula which can't be reduced.
		    Each atom of your formula will lead to a search in the
		    remaining possibilities.

		    An atom can be:
		    - part of a |gtd-title|. Eg: (=foo)
		    - |gtd-context|. Eg: @work
		    - |gtd-action|. Eg: !inbox or !waiting
		    - |gtd-attached| [*]
		    - |gtd-date|. Eg: Y2017, M06 or D29, respectively for
		      year, month and day.
		    - |gtd-content| to look for a |pattern| into your notes.
		      Eg: /bar
		    - |gtd-hashtag|. Eg. #meeting or #jean-marc

		    After the first character which is a leader allowing to
		    know what kind of atom you're looking for, atom can
		    contains |pattern| but no |/^| and no |/$| since they are
		    managed internally accordingly to their kind.

						*gtd-atom-exclusion*
		    You can exclude an atom of your results with -atom syntax.
			Eg. @context	    -@context
			    !action	    -!action
			    #hashtag	    -#hashtag
			    =title_search   -=title_search
			    /search	    -/search
			    Y2017	    -M06
			    [*]		    -[*]

						*gtd-completion*
		    Pressing <Tab> while you're editing your formula will
		    search for similar atoms in your existing notes and give
		    you back proposals. Title, content or date atoms are not
		    supported in completion system.

						*gtd-results*
		    The searches you do are loaded into a special temporary
		    gtd-results buffer which is automatically displayed in a
		    window. You can use it to access the GTD notes.

						*gtd-formula-examples*
>
		    :Gtd !inbox
<
		    Looks for the notes tagged !inbox

>
		    :Gtd -@work
<
		    Looks for notes related to any context but @work.

>
		    :Gtd !inbox @work
<
		    You can use several terms. What you get will match all the
		    terms (AND operator). This example looks for the notes
		    tagged !inbox and related to @work context.

>
		    :Gtd (!inbox + !scheduled-20170629) @home
<
		    Operators precedence is respected so you can look for both
		    !inbox notes and notes you wanted to get notice on
		    06/29/2017, all related to @home context.

>
		    :Gtd !todo #project
<
		    Looks for things to do about #project.

>
		    :Gtd =foo
<
		    Looks for notes with "foo" somewhere in the title line.

>
		    :Gtd Y2017 M06 D2[89]
		    :Gtd Y2017 M06 (D28 + D29)
<
		    Looks for notes created either the 28th or the 29th of
		    June 2017.

>
		    :Gtd [*]
<
		    Looks for notes with attached files.

>
		    :Gtd /pattern
<
		    Looks for a pattern through your notes.


		    All of these can be mixed. So, if you want to look for
		    your notes:
			- archived
			- containing #john-doe or "john doe" somewhere in the
			  file
			- with context set to @work
			- and which are not about "foo"
		    You will use: >
		    :Gtd !archive (#john-doe + /john\sdoe) @work -/foo
<
						*:GtdContext*
:GtdContext {arg}   Change (or set) the current value of
		    |g:gtd#default_context|.

		    {arg} must be a valid context (Eg. @work).

						*:GtdAdd*
:GtdAdd[!] {formula}
		    Same as |:Gtd| except previous results are kept if a
		    search has already been performed.

						*:GtdFilter*
:GtdFilter[!] {formula}
		    Same as |:Gtd| except default working files are deduced
		    from the current list of results if a former search has
		    been performed.

						*:GtdRefresh*
:GtdRefresh	    Refresh the current Gtd search, assuming you've done some
		    changes in the tags of the previous results.

		    Modifiers are allowed (see |<mods>|).

						*:GtdReview*
:GtdReview[!]	    If you are used to repeat a few |:Gtd| search, you might
		    like to use this command to execute them all in one
		    action.

		    With [!] no default context will be added to any of your
		    searches. See |g:gtd#default_context|.

		    Modifiers are allowed (see |<mods>|).

		    See |g:gtd#review|.

						*:GtdFiles*
:GtdFiles	    Open the directory associated to your Gtd file and let you
		    put some files into it. During the process, the plugin
		    wait for you to press <Enter> before resuming its
		    operations. Once you've done, the |gtd-attached-files|
		    marker is inserted or removed to the title of the Gtd
		    file.

		    First time you will use this command on a Gtd file,
		    directory is created. Resuming it with an empty directory
		    leads to its deletion and to the |gtd-attached-files|
		    marker removing.

						*:GtdExplore*
:GtdExplore	    Open the directory associated to your Gtd file in a
		    vertical split. See |netrw| for details.

						*:GtdDelete*
:GtdDelete	    Delete the GTD file and wipe out its buffer. If there is a
		    directory attached, it will ask you to confirm its removal
		    and finally delete the directory and its content, then the
		    GTD file. Operations are abandoned as soon as an error
		    occurs.

						*:GtdCache*
:GtdCache	    Create or refresh a cache file to speed up your searches.
		    Only available when |g:gtd#cache| has been set.


==============================================================================
4. Mappings					*gtd-mappings*

From the |gtd-results| buffer:

	<Enter>	    Display the |gtd-note| file under the cursor.
		    If the line under the cursor is the |gtd-formula|, it will
		    refresh the search.
		    Override this mapping with |g:gtd#map_edit|.

	<F5>	    Refresh the results.
		    Override this mapping with |g:gtd#map_refresh|.

	<C-Left>    Browse the history of recent searches.
	<C-Right>   Override this mappings with |g:gtd#map_browse_older| and
		    |g:gtd#map_browse_newer|.

From the |gtd-note| buffer:

	<Plug>GtdFiles

		    You might want to have a map to access your attached files
		    in a quicker way than executing |:GtdFiles|. To do so,
		    simply associate the key mapping of your choice to
		    <Plug>GtdFiles. This map is only available when the
		    current buffer has gtd filetype.
>
		    nmap <Leader>gf <Plug>GtdFiles
<
	<Plug>GtdExplore

		    This map allows you to use |:GtdExplore| faster.
>
		    nmap <Leader>ge <Plug>GtdExplore
<
Anywhere:

	<Plug>GtdNew

		    You can set a map to create a new Gtd file in a quicker
		    way than using |:GtdNew|. Key mappings can be equal for
		    normal and visual modes.
>
		    nmap <Leader>gn <Plug>GtdNew
		    vmap <Leader>gn <Plug>GtdNew
<
	<Plug>GtdDisplay

		    This mapping is available to recall, if available, the
		    last search that you have displayed.
>
		    nmap <Leader>gd <Plug>GtdDisplay
<
Other optional mapping have to be written manually in your vimrc file.
Eg. To quickly search for pending tasks or scheduled today: >
	nnoremap <Leader>tw :Gtd @work (!inbox + !scheduled-<C-R>=strftime("%Y%m%d")<CR>)<CR>
<

==============================================================================
5. Syntax					*gtd-syntax*

Title has to be the first line of the file

Highlighting of the tags

Markdown inspiration (titles for now, more to come)

						*gtd-completion*
A completion based on used tags is available in |gtd-note| buffers when you
are in insert mode on the tag lines. See |compl-function| and |i_CTRL-X_CTRL-U|.


==============================================================================
6. License					*gtd-license*

This plugin is licensed under the GPLv3.
You can read it here: http://www.gnu.org/licenses/gpl-3.0.en.html


==============================================================================
7. Contributing					*gtd-contributing*

						*g:gtd#debug*
If you want, you can get the debug messages of the plugin by setting the
g:gtd#debug variable. Default is 0. >
	let g:gtd#debug = 1
<
						*:GtdBench*
:GtdBench[!] {formula}	Same as |:Gtd| except that the search is performed
			multiple times and average execution time is printed
			at the end.

			Notes:
			- Only available when |g:gtd#debug| is on.
			- Debug messages are not displayed even if
			  |g:gtd#debug| is on.

						*gtd-bugs*
Thank you to track any issue you may encounter here:
	https://github.com/phb1/gtd.vim/issues

						*gtd-repository*
You can check for updates or browse the plugin here:
	https://github.com/phb1/gtd.vim


==============================================================================
8. Changelog					*gtd-changelog*

	+ Fix: Deletion of a |gtd-note| could lead to try the deletion of a
	  non existing cache.
	+ Allow users to set the command to open |:GtdFiles| with
	  |g:gtd#folder_command|.
	+ Fix: The template for a new |gtd-note| is no longer static if the
	  active context is changed.
	+ Add a map <Plug>GtdRefresh to quickly refresh the results.
	+ Reverse the results order to display the latest notes in the
	  beginning.
	+ <Plug>GtdDisplay now leads to the display of the last displayed
	  search, instead of the last one done.
	+ Context is now added to the searches only if it is useful.
	+ Gtd searches are displayed in the current window if |hidden| is on.
	+ Fix: <mods> are respected again for |:Gtd|.
	+ Fix: <mods> are respected again for |:GtdNew|.
	+ Fix: Use a correct regexp to search with the cache.
	+ Delete a |gtd-note| also updates the results history.
	+ Fix: <Plug>GtdDisplay is now faster to react.
	+ Fix: |gtd-results| mappings were available in any buffer.
	+ <Plug>GtdAttachedFiles is now defined as <Plug>GtdFiles.
	+ New |g:gtd#results_history| to define how many searches are saved
	  into the history.
	+ Mappings of |gtd-results| buffer can now be overrided with personal
	  mappings.
	+ Results are now loaded into the new |gtd-results| buffer instead of
	  the location list. This buffer is able to load the results of
	  multiple searches (as |GtdReview| can produce).
	+ Fix: trailing spaces in the Gtd request weren't removed as expected
	  due to the adding of default context.
	+ |:GtdNew| is now capable to use a range as initial content of the
	  notes. Removal of the dedicated command.
	+ Fix: it is now possible to look for tags in the cache using regular
	  expressions.
	+ Cache system.
	+ Fix bug with internal parenthesized blocks during formula
	  simplification.
	+ Fix bug with the highlighting of results, for atom |gtd-content|.
	+ Optimization of results collection (assignation seems slightly
	  faster than the add() function).
	+ Fix issue with |:GtdAdd| and |:GtdFilter| which didn't use short
	  names of the former results.
	+ New command |:GtdDelete| to delete the GTD file and its attached
	  files.
	+ |:GtdExplore| is possible if the directory really exists.
	+ GtdMarkdowFold() is now only defined if needed.
	+ Only complete |:GtdContext| with relevant context tags.
	+ Manage vim markers as a folding method (in addition to the Markdown
	  titles).
	+ New command |:GtdContext|.
	  Gtd.vim now automatically filters searches according to the current
	  context.
	+ Accept 0 for |g:gtd#tag_lines_count| and use in the gtd syntax.

0.0.1~

	+ Initial version of the plugin. Enjoy!


==============================================================================
9. Credits					*gtd-credits*

	Vim		Thank you Bram Moolenaar!
	Vimscript help	Thank you to the community #vim on freenode.net
	GTD methodology	Thank you to David Allen!

 vim:tw=78:ts=8:ft=help:norl:
